#!/usr/bin/env /c/Users/zfeng/AppData/Local/Programs/Python/Python38/python
from requests import get, exceptions, ConnectionError
import re
import argparse


parser = argparse.ArgumentParser()
parser.add_argument("doi",
                    type=str,
                    help="The doi string of the document")
parser.add_argument("--proxy",
                    type=str,
                    # default="socks5h://127.0.0.1:9150",
                    help="Requests-type proxy argument. "
                    "Used for both HTTP and HTTPS. "
                    "Use socks5h://127.0.0.1:9150 "
                    "for tor browser socks5 proxy. "
                    # "Pass a empty string to disable proxy. "
                    "Default: "
                    # "no proxy"
                    "socks5h://127.0.0.1:9150"
                    )
parser.add_argument("--domain",
                    type=str,
                    default="https://sci-hub.se/",
                    help="Domain of scihub site to use. "
                    "Default: "
                    "https://sci-hub.se/")
parser.add_argument("--output",
                    type=str,
                    help="Save file with this name stem. "
                    "Default: "
                    "the remote file name")
parser.add_argument("--chunk",
                    type=int,
                    default=8192,
                    help="Size of each download chunk, in bytes. "
                    "Default: "
                    "8192")
args = parser.parse_args()
proxyDict = {'http': args.proxy,
             'https': args.proxy} if (args.proxy is not None
                                      and args.proxy != "") else None
# check proxy
if proxyDict is not None:
    try:
        print("Testing proxy ...")
        get("https://example.com/", proxies=proxyDict)
    except (exceptions.InvalidURL, exceptions.ProxyError):
        print("Proxy config is invalid")
        quit()
    except ConnectionError:
        print("Failed connecting to requested proxy")
        quit()
    except Exception as e:
        print("Unknown exception: ")
        print(e)
        quit()
    else:
        print(f"Using proxy {args.proxy}")
else:
    input("Configured with no proxy. Press Enter to continue")


if args.doi is None:
    args.doi = input("Enter the DOI string: ")

# TODO check if different mirrors have different response
rePattern = re.compile(
    "^ *<button onclick = \"location\.href=\\'"
    "(http.+)\?download=true"
    "'\">&darr; save</button>",
    re.I
)

firstResponse = get(args.domain + args.doi,
                    proxies=proxyDict)

downloadLinkLst = []

# TODO better method of checking first return
if firstResponse.headers.get('Set-Cookie', None) is None:
    print("No response. Maybe no search result?")
else:
    for line in firstResponse.text.split('\n'):
        if (s := rePattern.search(line)):
            docURL = s.group(1)
            downloadLinkLst.append(s.group(1))
    if len(downloadLinkLst) == 0:
        print("No download link detected in response. "
              "Please check on the website manually. ")
    else:
        if len(downloadLinkLst) > 1:
            print("Multiple download links found. ")
            print("They are: ")
            for lkn in downloadLinkLst:
                print(lkn)
            print("Using the first link")
            downloadLinkLst = list(downloadLinkLst[0])
        else:
            docURL = downloadLinkLst[0]
            print(f"Downloading from {docURL} ...")
            dlFilename = docURL.rsplit('/')[-1]
            if args.output is not None:
                dlFilename = args.output + '.' + dlFilename.split('.')[-1]
            with get(docURL, proxies=proxyDict, stream=True) as r:
                fileSize = r.headers.get('Content-Length', None)
                if fileSize is not None:
                    fileSize = int(fileSize)
                    print(f"File size: {fileSize}")
                else:
                    print("File size unknown")
                downloadedSize = 0
                lastLineLen = 0
                with open(dlFilename, 'wb') as f:
                    for chunk in r.iter_content(chunk_size=args.chunk):
                        f.write(chunk)
                        if fileSize is not None:
                            downloadedSize += len(chunk)
                            dlMsg = f"{downloadedSize / fileSize * 100 :.2f}%"
                            print(dlMsg, end='')
                            lendlMsg = len(dlMsg)
                            print(" " * (lastLineLen - lendlMsg),
                                  end='\r')
                            lastLineLen = lendlMsg
            print("\nDownload done")
